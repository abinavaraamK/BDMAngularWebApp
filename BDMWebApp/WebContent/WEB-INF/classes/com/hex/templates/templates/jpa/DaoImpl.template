package <Package>.dao;

import <Package>.vo.<ValueObject>;
import org.springframework.orm.jpa.support.JpaDaoSupport;
import org.springframework.orm.jpa.JpaCallback;
import org.springframework.orm.ObjectRetrievalFailureException;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Vector;
import java.util.ArrayList;
import java.util.Iterator;
import <Package>.util.HexApplicationException;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceException;
import javax.persistence.Query;



public class <ClassName>DaoImpl extends JpaDaoSupport implements <ClassName>Dao {

	public void insert(<ValueObject> object) throws HexApplicationException {
	
		System.out.println("inside insert in DAO");
		try {
			getJpaTemplate().persist(object);
		}
		catch (Exception exception ) {
			throw new HexApplicationException ( exception );
		}

	}

	public void delete(<ValueObject> object) throws HexApplicationException {
	
		System.out.println("inside delete in DAO");
		try {
			getJpaTemplate().remove(getJpaTemplate().merge(object));
		}
		catch ( DataAccessException exception ) {
			throw new HexApplicationException ( exception );
		}
	}

	public void deleteAll(java.util.Collection entries) throws HexApplicationException {
	
		System.out.println("inside deleteAll in DAO");
		try {
			for( Iterator iterator = entries.iterator(); iterator.hasNext(); ) {
				//Emp entity = (Emp) iterator.next();
				//System.out.println("********** DELETE EMPNO: " + entity.getEmpno() );
				getJpaTemplate().remove(getJpaTemplate().merge((<ValueObject>) iterator.next()));
				getJpaTemplate().flush();
			}
		}
		catch ( DataAccessException exception ) {
			throw new HexApplicationException ( exception );
		}
	}

	public void update(<ValueObject> object) throws HexApplicationException {
	
		System.out.println("inside update in DAO");
		try {
			getJpaTemplate().merge(object);
		}
		catch ( DataAccessException exception ) {
			throw new HexApplicationException ( exception );
		}
	}

	public <ValueObject> select(<ValueObject> object) throws HexApplicationException {
	
		System.out.println("inside select in DAO");	
		try {
			<ValueObject> <ValueObjectInstance> = (<ValueObject>) getJpaTemplate().find(
				<ValueObject>.class, object.get<PrimaryKey>());
			return <ValueObjectInstance>;
		}
		catch ( DataAccessException exception ) {
			throw new HexApplicationException ( exception );
		}
	}

	public java.util.List getAll<ValueObject>() throws HexApplicationException {
		try {
			return getJpaTemplate().find("Select entity from <ValueObject> entity"); 
		}
		catch ( DataAccessException exception ) {
			throw new HexApplicationException ( exception );
		}
	}

	public java.util.List getAll<ValueObject>(final int startRecord, final int pageSize) throws HexApplicationException {
		return (List) getJpaTemplate ().execute ( new JpaCallback () {
		    public Object doInJpa (EntityManager entityManager) throws PersistenceException {
			StringBuffer lsQuery = new StringBuffer ( "SELECT entity FROM <ValueObject> entity");
			System.out.println ("QUERY " + lsQuery.toString ());
			Query query = null;
			query = entityManager.createQuery ( lsQuery.toString () )
			    .setFirstResult ( startRecord )
			    .setMaxResults ( pageSize );
			return query.getResultList ();
		    }
		});	
	}
	public int get<ValueObject>Count() throws HexApplicationException {
		try {
			class ReturnValue  {
				Long value;
			}
			final ReturnValue rv = new ReturnValue();
			getJpaTemplate ().execute ( new JpaCallback () {
				public Object doInJpa (EntityManager entityManager) throws PersistenceException {
					StringBuffer lsQuery = new StringBuffer ( "SELECT count(entity) FROM <ValueObject> entity");
					System.out.println ("QUERY " + lsQuery.toString ());
					Query query = null;
					rv.value = ((Long) entityManager.createQuery (lsQuery.toString()).getSingleResult() );
					return null;
				}
			});	
			return rv.value.intValue();
		}
		catch ( DataAccessException exception ) {
			throw new HexApplicationException ( exception );
		}
	}
	

    public List search(String fieldValue, String columnName)
			throws HexApplicationException {
             
			System.out.println("Entering into DAO implementation : " + fieldValue + "***" +columnName );
		   
		try {
			 
			 Query query=getJpaTemplate().getEntityManagerFactory().createEntityManager().createNativeQuery("Select * from <ValueObject>  WHERE upper(" + columnName + ") LIKE ?",<ValueObject>.class);
	         query.setParameter(1,"%"+fieldValue.toUpperCase()+"%");
	
			 return query.getResultList();

		} catch (DataAccessException poDAE) {
			throw new HexApplicationException(poDAE);
		}
	}


	<SelectColumnsMethods>
}
