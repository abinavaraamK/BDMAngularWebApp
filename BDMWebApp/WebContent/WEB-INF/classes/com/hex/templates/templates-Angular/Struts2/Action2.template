package <Package>.action;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Date;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.Enumeration;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Map;

import <Package>.delegate.<ClassName>BusinessDelegate;
import <Package>.vo.<ClassName>;
import <Package>.util.HexApplicationException;
import <Package>.action.BaseAction;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import javax.servlet.http.HttpSession;
import java.util.Date;
import java.net.InetAddress;
import java.net.UnknownHostException;
import org.apache.struts2.interceptor.ApplicationAware;
import org.apache.struts2.interceptor.ServletRequestAware;

import java.lang.reflect.Field;

public class <ClassName>Action extends BaseAction {

    public <ClassName> <ValueObjectParam>;
	  public <ClassName> <ValueObjectParam>4edit;
    private List results;
    private HashMap columnNameFields;
    private HashMap staticSelectValues;



public HashMap getstaticSelectValues() {
		return staticSelectValues;
	}
    public void setstaticSelectValues(HashMap Values) {
		this.staticSelectValues = staticSelectValues;
	}





    public HashMap getColumnNameFields() {
		return columnNameFields;
	}
    public void setColumnNameFields(HashMap columnNameFields) {
		this.columnNameFields = columnNameFields;
	}

    <PrivateVariables>
    <SetGetMethods>

      public String fieldValue; 
	public String columnName; 
	public String columnValue; 
      private List pagenationList;	
	private String selectedField;
      public List staticSelect;
	
	
    public List getResults() {
		return results;
    }

    public void setResults(List results) {
		this.results = results;
    }
    
    public <ClassName> get<ClassName>VO() {
        return <ValueObjectParam>;
    }
    
    public void set<ClassName>VO(<ClassName> <ValueObjectParam>) {
     this.<ValueObjectParam> = <ValueObjectParam>;
    }    

	public String getFieldValue() {
		return fieldValue;
	}
	public <ClassName> get<ClassName>VO4edit() {
        return <ValueObjectParam>4edit;
    }
    
    public void set<ClassName>VO4edit(<ClassName> <ValueObjectParam>4edit) {
     this.<ValueObjectParam>4edit = <ValueObjectParam>4edit;
    }  
	public void setFieldValue(String fieldValue) {
		this.fieldValue = fieldValue;
	}

	public String getColumnName() {
		return columnName;
	}

	public void setColumnName(String columnName) {
		this.columnName = columnName;
	}

	public String getColumnValue() {
		return columnValue;
	}

	public void setColumnValue(String columnValue) {
		this.columnValue = columnValue;
	}
      public String getSelectedField() {
		return selectedField;
	}

	public void setSelectedField(String selectedField) {
		this.selectedField = selectedField;
	}

	public List getPagenationList() {
		return pagenationList;
	}

	public void setPagenationList(List pagenationList) {
		this.pagenationList = pagenationList;
	}

     
	public String addnew() {	
		System.out.println("inside addnew in Action");

            <SelectColumnsMethods>
            <StaticSelectColumnsMethods>
		<ValueObjectParam> = new <ClassName>();
		return "add";
	}


	public String create() throws HexApplicationException {
			
		System.out.println("inside create in Action");		
            //<ClassName> <ValueObjectParam>=(<ClassName>) ActionContext.getContext().getSession().get("<ValueObjectParam>");	
		//<ClassName> <ValueObjectParam>=(<ClassName>)request.getAttribute("<ValueObjectParam>");
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		
		try {
            delegate.insert(<ValueObjectParam>);
		
		} catch (HexApplicationException hexAppplicationException) {
			addActionError("primary key violation");
			hexAppplicationException.printStackTrace();
			return "failure";
	      } catch (Exception exception) {
			exception.printStackTrace();
			return "failure";
		      
	      }
            list();		 
            return "success";						
	}
	
	public String edit() {
			
		System.out.println("inside edit in Action");
            String key = request.getParameter("key");
		
		System.out.println(">>>>>>>> inside edit Key = " + key);
            <ValueObjectParam>4edit=new <ClassName>();
       	<ValueObjectParam>4edit.set<PrimaryKey>(Integer.parseInt(key));
             System.out.println(">>>>>>>> after parse= " + key);
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		<SelectColumnsMethods>
            <StaticSelectColumnsMethods>

		try {
            	<ValueObjectParam>4edit = (<ClassName>) delegate.select(<ValueObjectParam>4edit);
	     
                                   
        	} catch (HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
		     
			return "failure";

	      } catch (Exception exception) {
			exception.printStackTrace();
		      
			return "failure";

	      }		
        	return "edit";			
	}
	public String update() throws HexApplicationException {
			
		System.out.println("inside update in Action");
	     
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();

		try {
			
            <ValueObjectParam>4edit.set<PrimaryKey>(<ValueObjectParam>4edit.get<PrimaryKey>()); 
        		delegate.update(<ValueObjectParam>4edit);
        	}catch (HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();		      
			return "failure";
	      } catch (Exception exception) {
			exception.printStackTrace();
			return "failure";
		      
	      }		
	      list();
        	return "success";
	
	}
	
	public String delete() {
			List deleteList = new ArrayList();
		System.out.println("getting into delete method");
		for (int index = 0; index < pagenationList.size(); index++) {
			<ClassName> <ValueObjectParam> = (<ClassName>) pagenationList.get(index);
			if (<ValueObjectParam>.isToBeDeleted() == true) {
				deleteList.add(<ValueObjectParam>);
			}
		}
			<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		
		try {
                  
			if (deleteList.size() > 0)
				delegate.deleteAll(deleteList);
	      } catch (HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
			return "failure";

	      } catch (Exception exception) {
			exception.printStackTrace();
			return "failure";
	      }
		return "success";
	}
	
	public String deleteAll() {
			
		System.out.println("inside deleteAll in Action");

        	Enumeration enumeration = request.getParameterNames();
       	ArrayList entries = new ArrayList();
        	while (enumeration.hasMoreElements()) {
            	String key = (String) enumeration.nextElement();
            	if( key.startsWith("chk_") ) {
                		String value = request.getParameter("delete_" + key.substring(key.indexOf("_") + 1));
						<ValueObjectParam> = new <ClassName>();
                		<ValueObjectParam>.set<PrimaryKey>(Integer.parseInt(value));			
                		entries.add(get<ClassName>VO());
            	}
        	}
        	if( entries.size() > 0) {
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
            try {
            	delegate.deleteAll((java.util.Collection)entries);
            } catch (HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
			return "failure";

		} catch (Exception exception) {
			exception.printStackTrace();
			request.setAttribute("Exception", exception);
			return "failure";
		}		
        }
		try {
		list();
		}catch (Exception exception) {
		exception.printStackTrace();
		}
		
        return "list";
	}

	public String select() {
		
		System.out.println("inside select in Action");
			
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		
		try {
                  //<ValueObjectParam> = (<ClassName>) delegate.search(<ValueObjectParam>);
        	        pagenationList = (List) delegate.search(getFieldValue(),getColumnName());
			if ( pagenationList.size() > 0) {
		     doPagination( pagenationList);
                } 
             } catch (HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
			return "failure";
	      } catch (Exception exception) {
			exception.printStackTrace();
		      request.setAttribute("Exception", exception);
			return "failure";
		      
	      }		
            return "success";		
			
	}
	
	public String list() throws HexApplicationException {
        
		 setFieldValue("");
             setSelectedField("");
		 populateColumnNameFields(<ValueObjectParam>);
		 System.out.println("inside list in Action");
		 <ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
             delegate.getAll<ClassName>();
		 int record_count=0, page_size = 10, no_of_pages = 0;
		try {
			record_count = delegate.get<ClassName>Count();
		}
		catch( HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
                         return "Failure";
		}
		if( record_count > 0 && page_size > 0 )
			no_of_pages = (int)Math.ceil((double)record_count/page_size);
		String lsPage_num = request.getParameter("page_num");
		int page_num = 1;
		if( lsPage_num != null ) page_num = Integer.parseInt(lsPage_num);
		if( page_num > no_of_pages ) page_num = no_of_pages;
		int start = ((page_size * page_num) - page_size );		
		System.out.println(">>>>>>>> inside List,  page_num = " + page_num + " : Start = " + start + " :  Page_size = " + page_size + " : record_count = " + record_count );

		try {
			java.util.List list = (java.util.List) delegate.getAll<ClassName>(start, page_size);
                  results = list;
			
	        } catch (HexApplicationException hexAppplicationException) {
			  hexAppplicationException.printStackTrace();
		       
	        } catch (Exception exception) {
			exception.printStackTrace();
		        request.setAttribute("Exception", exception);
			  return "failure";
		        
	        }
		if( page_num > 0 )
			request.setAttribute("current_page", Integer.toString(page_num));
		if( no_of_pages > 0 )
			request.setAttribute("no_of_pages", Integer.toString(no_of_pages));
		
		return "success";	
    
		
	}

         public String staticSelect() throws HexApplicationException {
         <ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
         try{

         staticSelect= new ArrayList<String>(); 
         staticSelect.add("1");
         staticSelect.add("2");



          }   catch (Exception exception) {
			exception.printStackTrace();
		      request.setAttribute("Exception", exception);
			return "failure";
	        }
		return "success";

  
          }

	public String search() throws NoSuchFieldException, SecurityException, HexApplicationException{
           //<ClassName>Action form=new <ClassName>Action();

		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		try {
		  pagenationList = (List) delegate.search(getFieldValue(),
					getSelectedField());
			if( pagenationList.size()>0){	
				doPagination(pagenationList);
			}
			else{ 
				addActionError("No such record found in the Database");							
				 return "failure";
				
			}
	        } catch (HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
			return "failure";
	        } catch (Exception exception) {
			exception.printStackTrace();
		     // request.setAttribute("Exception", exception);
			return "failure";
	        }
		return "success";
	}

	public void doPagination(List list){
		
		int record_count = list.size();
		
		int page_size = 10, no_of_pages = 0;
            populateColumnNameFields(<ValueObjectParam>);
		if( record_count > 0 && page_size > 0 )
			no_of_pages = (int)Math.ceil((double)record_count/page_size);
		String lsPage_num = request.getParameter("page_num");
		int page_num = 1;
		if( lsPage_num != null )
            page_num = Integer.parseInt(lsPage_num);
		if( page_num > no_of_pages ) page_num = no_of_pages;
		int start = ((page_size * page_num) - page_size );		
		System.out.println(">>>>>>>> inside List,  page_num = " + page_num + " : Start = " + start + " :  Page_size = " + page_size + " : record_count = " + record_count );
		
	      results = list;
		if( page_num > 0 )
			request.setAttribute("current_page", Integer.toString(page_num));
		if( no_of_pages > 0 )
			request.setAttribute("no_of_pages", Integer.toString(no_of_pages));
		
	}

	private Field[] getFields(Object source) {
		return source.getClass().getDeclaredFields();
	}

	private void populateColumnNameFields(<ClassName> <ValueObjectParam>) {
      <ClassName> productnew= new <ClassName>();
		Field fields[] = getFields(productnew);		
		columnNameFields = new HashMap();		
		int i=0;
		for (int index = 0; index < fields.length; index++) {
			Field field = fields[index];
			if (field.getName() != null && field.getName().length() != 0
					&& field.getName()!= "hashCode" && field.getName()!= "toBeDeleted") {
				String tempColumnValue = field.getName();
				tempColumnValue = tempColumnValue.substring(0, 1)
						.toUpperCase()
						+ tempColumnValue.substring(1,
								tempColumnValue.length()).toLowerCase();
				
                                 columnNameFields.put(field.getName(),field.getName()); 


			}			
		}
	}


public void handleException(Exception exception) {
		
	}


}