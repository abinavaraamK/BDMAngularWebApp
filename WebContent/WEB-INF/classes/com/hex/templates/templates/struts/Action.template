package <Package>.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;

import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Locale;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import <Package>.form.<ClassName>Form;
import <Package>.delegate.<ClassName>BusinessDelegate;
import <Package>.vo.<ClassName>;
import <Package>.util.HexApplicationException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Date;
import java.lang.reflect.Field;

public class <ClassName>Action extends DispatchAction {

public ActionForward addnew(ActionMapping mapping, ActionForm form,
	HttpServletRequest request, HttpServletResponse response)  {
	System.out.println("inside addnew in Action");
	
		<SelectColumnsMethods>
		
		form = new <ClassName>Form();		
		return mapping.findForward("add");
	}

public ActionForward create(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			
		System.out.println("inside create in Action");			
		<ClassName>Form <FormObject> = (<ClassName>Form) form;			
		<CheckBoxContent>
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		
		try {
			
			String date=new Date().toString();
			Date formatter=null;
			delegate.insert(get<ClassName>(<FormObject>));
		} catch (HexApplicationException hexAppplicationException) {
		    exceptionHandler(request, hexAppplicationException);
		    return mapping.findForward("failure");
		} catch (Exception exception) {
		    System.out.println("Exception");
		    exception.printStackTrace();
		    request.setAttribute("Exception2", exception);
		    return mapping.findForward("failure");
		}
		return list( mapping, form, request, response );						
	}
	
public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			
		System.out.println("inside edit in Action");		
		<ClassName>Form <FormObject> = (<ClassName>Form) form;	
		String key = request.getParameter("key");
		System.out.println(">>>>>>>> inside edit Key = " + key);
		<FormObject>.set<PrimaryKey>(key);
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		<ClassName> <ValueObject> = null;
		
		try {
			
			<ValueObject> = (<ClassName>) delegate.select(get<ClassName>(<FormObject>));
			<SelectColumnsMethods>
	        } catch (HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
		        exceptionHandler(request, hexAppplicationException);
		        return mapping.findForward("failure");
	        } catch (Exception exception) {
			exception.printStackTrace();
		        request.setAttribute("Exception", exception);
		        return mapping.findForward("failure");
	        }				
		<FormObject> = get<ClassName>Form(<ValueObject>, <FormObject> );
		return mapping.findForward("edit");	
			
	}
public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			
		System.out.println("inside update in Action");	
		<ClassName>Form <tableNameLC> = (<ClassName>Form) form;	
		<CheckBoxContent>
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		try {
			String date=new Date().toString();
			Date formatter=null;
			delegate.update(get<ClassName>(<tableNameLC>));
			<SelectColumnsMethods>
	        } catch (HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
		        exceptionHandler(request, hexAppplicationException);
		        return mapping.findForward("failure");
	        } catch (Exception exception) {
			exception.printStackTrace();
		        request.setAttribute("Exception", exception);
		        return mapping.findForward("failure");
	        }						
			
		return list( mapping, form, request, response );
	}
	
public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			
		System.out.println("inside delete in Action");
		<ClassName>Form <FormObject> = (<ClassName>Form) form;	
		String key = request.getParameter("key");
		System.out.println(">>>>>>>> inside delete Key = " + key);
		if( key != null ) 
			<FormObject>.set<PrimaryKey>(key);
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		
		try {
			delegate.delete(get<ClassName>(<FormObject>));
	        } catch (HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
		        exceptionHandler(request, hexAppplicationException);
		        return mapping.findForward("failure");
	        } catch (Exception exception) {
			exception.printStackTrace();
		        request.setAttribute("Exception", exception);
		        return mapping.findForward("failure");
	        }
		<FormObject>.reset(mapping, request);
		return list( mapping, form, request, response );
	}
	
public ActionForward deleteAll(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			
		System.out.println("inside deleteAll in Action");
		Enumeration loEnum = request.getParameterNames();
		ArrayList entries = new ArrayList();
		while (loEnum.hasMoreElements())
		{
			String key = (String) loEnum.nextElement();
			if( key.startsWith("chk_") )
			{
				String value = 	request.getParameter("delete_" + key.substring(key.indexOf("_")+1));
				System.out.println("inside deleteAll key =" + key + " : value =" + value);
				<ClassName>Form <FormObject> = new <ClassName>Form();
				<FormObject>.reset( mapping, request );
				<FormObject>.set<PrimaryKey>(value);			
				entries.add ( get<ClassName>(<FormObject>) );
			}
		}		
		if( entries.size() > 0) {
			<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
			try {
				delegate.deleteAll( (java.util.Collection)entries);
			} catch (HexApplicationException hexAppplicationException) {
				hexAppplicationException.printStackTrace();
				exceptionHandler(request, hexAppplicationException);
				return mapping.findForward("failure");
			} catch (Exception exception) {
				exception.printStackTrace();
				request.setAttribute("Exception", exception);
				return mapping.findForward("failure");
			}				
		}
		return list( mapping, form, request, response );
	}

public ActionForward select(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			
		System.out.println("inside select in Action");		
		<ClassName>Form <FormObject> = (<ClassName>Form) form;			
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		<ClassName> <ValueObject> = null;
		
		try {
			<ValueObject> = (<ClassName>) delegate.select(get<ClassName>(<FormObject>));
	        } catch (HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
		        exceptionHandler(request, hexAppplicationException);
		        return mapping.findForward("failure");
	        } catch (Exception exception) {
			exception.printStackTrace();
		        request.setAttribute("Exception", exception);
		        return mapping.findForward("failure");
	        }		
		
		<FormObject> = get<ClassName>Form(<ValueObject>, <FormObject> );
		return mapping.findForward("success");	
			
	}
	
	


private <ClassName> get<ClassName>(<ClassName>Form <FormObject>) {
	
	 	<ClassName> <ValueObject> = new <ClassName>();			 	
	<VOTransformationCode>
	 	return <ValueObject>;
	
	
	}

	private <ClassName>Form get<ClassName>Form(<ClassName> <ValueObjectParam>, <ClassName>Form <FormObjectParam> ) {
		 	
	<FormTransformationCode>
	 	return <FormObjectParam>;
	
	
	}	

private java.util.Collection get<ClassName>Form ( java.util.List list )  {

		java.util.ArrayList results = new java.util.ArrayList();
		if ( list != null && list.size() > 0)
		{
			for(int index = 0 ; index < list.size(); index ++ )
			{
				<ClassName> wo<ClassName>VO = (<ClassName>)list.get(index);
				<ClassName>Form form = new <ClassName>Form();
				form = get<ClassName>Form ( wo<ClassName>VO, form );
				results.add ( form );
			}
		}	
		return (java.util.Collection) results;
	}

public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		<ClassName>Form <FormObject> = (<ClassName>Form) form;
		<FormObject>.setFieldValue("");	
		<FormObject>.setColumnName("");

		populateColumnNameFields(<FormObject>, request);
			
		System.out.println("inside list in Action");
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		int record_count, page_size = 10, no_of_pages = 0;
		try {
			record_count = delegate.get<ClassName>Count();
		}
		catch( HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
		        exceptionHandler(request, hexAppplicationException);
		        return mapping.findForward("failure");
		}
		if( record_count > 0 && page_size > 0 )
			no_of_pages = (int)Math.ceil((double)record_count/page_size);
		String lsPage_num = request.getParameter("page_num");
		int page_num = 1;
		if( lsPage_num != null ) page_num = Integer.parseInt(lsPage_num);
		if( page_num > no_of_pages ) page_num = no_of_pages;
		int start = ((page_size * page_num) - page_size );		
		System.out.println(">>>>>>>> inside List,  page_num = " + page_num + " : Start = " + start + " :  Page_size = " + page_size + " : record_count = " + record_count );

		try {
			java.util.List list = (java.util.List) delegate.getAll<ClassName>(start, page_size);

			java.util.Collection results = get<ClassName>Form(list);
			if( results != null && results.size() > 0 )
				request.setAttribute("results",results);
	        } catch (HexApplicationException hexAppplicationException) {
				hexAppplicationException.printStackTrace();
		        exceptionHandler(request, hexAppplicationException);
		        return mapping.findForward("failure");
	        } catch (Exception exception) {
			exception.printStackTrace();
		        request.setAttribute("Exception", exception);
		        return mapping.findForward("failure");
	        }
		if( page_num > 0 )
			request.setAttribute("current_page", Integer.toString(page_num));
		if( no_of_pages > 0 )
			request.setAttribute("no_of_pages", Integer.toString(no_of_pages));
		return mapping.findForward("list");			
	}

public ActionForward search(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		<ClassName>Form <FormObject> = (<ClassName>Form) form;	
		
		<ClassName>BusinessDelegate delegate = new <ClassName>BusinessDelegate();
		try {
			java.util.List list = (List) delegate.search(<FormObject>.getFieldValue(),
					<FormObject>.getColumnName());
			if(list.size()>0){	
				doPagination(list, request);
			}
			else{							
		            ActionMessages messages = new ActionMessages();
		            ActionMessage msg = new ActionMessage("ERROR.DATANOTAVAILABLE");
		            messages.add("message1", msg);
		            saveMessages(request, messages);
			}
	        } catch (HexApplicationException hexAppplicationException) {
			hexAppplicationException.printStackTrace();
		        exceptionHandler(request, hexAppplicationException);
		        return mapping.findForward("failure");
	        } catch (Exception exception) {
			exception.printStackTrace();
		        request.setAttribute("Exception", exception);
		        return mapping.findForward("failure");
	        }
		return mapping.findForward("list");
	}

	public void doPagination(List list, HttpServletRequest request){
		
		int record_count = list.size();
		
		int page_size = 10, no_of_pages = 0;
		
		if( record_count > 0 && page_size > 0 )
			no_of_pages = (int)Math.ceil((double)record_count/page_size);
		String lsPage_num = request.getParameter("page_num");
		int page_num = 1;
		if( lsPage_num != null ) page_num = Integer.parseInt(lsPage_num);
		if( page_num > no_of_pages ) page_num = no_of_pages;
		int start = ((page_size * page_num) - page_size );		
		System.out.println(">>>>>>>> inside List,  page_num = " + page_num + " : Start = " + start + " :  Page_size = " + page_size + " : record_count = " + record_count );
		
		java.util.Collection results = get<ClassName>Form(list);
		
		if( results != null && results.size() > 0 )
			request.setAttribute("results",results);
		
		if( page_num > 0 )
			request.setAttribute("current_page", Integer.toString(page_num));
		if( no_of_pages > 0 )
			request.setAttribute("no_of_pages", Integer.toString(no_of_pages));
		
	}

	private Field[] getFields(Object source) {
		return source.getClass().getDeclaredFields();
	}

	private void populateColumnNameFields(<Package>.form.<ClassName>Form form, HttpServletRequest request) {
		
		<Package>.vo.<ClassName> getVOfields = new <Package>.vo.<ClassName>();
		Field fields[] = getFields(getVOfields);		
		List columnNameFields = new ArrayList();		
		int i=0;
		for (int index = 0; index < fields.length; index++) {
			Field field = fields[index];
			if (field.getName() != null && field.getName().length() != 0
					&& field.getName()!= "hashCode" && field.getName()!= "toBeDeleted") {
				String tempColumnValue = field.getName();
				tempColumnValue = tempColumnValue.substring(0, 1)
						.toUpperCase()
						+ tempColumnValue.substring(1,
								tempColumnValue.length()).toLowerCase();
				form = new <ClassName>Form();
				form.setColumnValue(field.getName());
				form.setColumnName(tempColumnValue);
				
				columnNameFields.add(form);
			}			
		}
		form = new <ClassName>Form();
		form.setColumnValue("");
		form.setColumnName("--Select the field--");
		columnNameFields.add(0,form);			
		HttpSession session=request.getSession();
		session.setAttribute("columnNameFields",columnNameFields);
	}

	private void exceptionHandler(HttpServletRequest request, Exception exception) {
		HexApplicationException hexAppplicationException = (HexApplicationException) exception;
		ActionMessages messages = new ActionMessages();
		if ( hexAppplicationException.getMessageCode() != null && hexAppplicationException.getMessageCode().length()>0 ) {
		    ActionMessage msg = new ActionMessage(hexAppplicationException.getMessageCode());
		    messages.add("message1", msg);
		}
		else {
		    ActionMessage msg = new ActionMessage("GENERAL_DB_EXCEPTION");
		    messages.add("message1", msg);
		}
		saveMessages(request, messages);
	}
}