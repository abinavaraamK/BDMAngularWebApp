/*
 * EmpBean.java
 *
 * Created on May 22, 2007, 3:04 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package <packageName>;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.faces.model.ListDataModel; 
import javax.faces.model.DataModel; 
import javax.faces.application.FacesMessage;
import javax.faces.component.html.HtmlPanelGroup;
import java.io.Serializable;
import <VOClassImport>;
import <BusinessDelegateClassImport>;
import java.util.ArrayList;
import java.util.List;
import javax.faces.event.ValueChangeEvent;
import java.util.Date;
import java.net.InetAddress;
import java.net.UnknownHostException;
import <Package>.util.HexApplicationException;

import java.lang.reflect.Field;	
public class <MBeanClassName> implements Serializable{
    private List <voInstanceName>List;
    private boolean deleteAll;
    private boolean hasContents;
    private <VOClassName> <voInstanceName>;
    private SelectItem[] pageList;
    private int pageSize;
    private String currentPage;
    
    <SelectMethodInstanceVariables>

   private DataModel <voInstanceName>DataModel;	
   private SelectItem[] columnNameList;	

   private String fieldValue;		
   private String columnName;		
   private String columnValue;	
   
   private HtmlPanelGroup <voInstanceName>Panel;

private int scrollerPage;

    public int getScrollerPage() {
        return this.scrollerPage;
    }

    public void setScrollerPage(int scrollerPage) {
        this.scrollerPage = scrollerPage;
    }
    
    public <MBeanClassName>() {
        <voInstanceName> = new <VOClassName>();
	set<VOClassName>Panel(new HtmlPanelGroup());
        pageSize = 10;
        initialiseList();
        <selectMethods>
    }
    private void initialiseList(){
        try{
		<voInstanceName>List = getAllContents();
		doPagination(<voInstanceName>List);
        }catch(Exception ex){
   		FacesContext.getCurrentInstance ().addMessage ( "Error", new FacesMessage ( FacesMessage.SEVERITY_INFO, ex.getMessage(), ex.getMessage()));        
        }
        
    }
    
    
    public void pageValueChanged(ValueChangeEvent ve){
        currentPage = (String)ve.getNewValue();
        getList();
        
          FacesContext.getCurrentInstance().renderResponse();
    }
    public SelectItem[] getPageList() {
        return pageList;
    }
    
    public void setPageList(SelectItem[] pageList) {
        this.pageList = pageList;
    }
    public String getCurrentPage() {
        return currentPage;
    }
    public int getPageSize() {
        return pageSize;
    }
    public void setCurrentPage(String currentPage) {
        this.currentPage = currentPage;
    }
    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }
    
     public void set<VOClassName>DataModel(DataModel <voInstanceName>DataModel) {
            this.<voInstanceName>DataModel = <voInstanceName>DataModel;
        }
    
        public DataModel get<VOClassName>DataModel() {
            return <voInstanceName>DataModel;
    }
    
    public void set<VOClassName>(<VOClassName> <voInstanceName>) {
        this.<voInstanceName> = <voInstanceName>;
    }
    
    public <VOClassName> get<VOClassName>() {
        return <voInstanceName>;
    }
    
    
     <selectMethodGettersSetters>
     
    
    public void setHasContents(boolean hasContents) {
        this.hasContents = hasContents;
    }
    
    public boolean isHasContents() {
        return hasContents;
    }
    
    public void setDeleteAll(boolean deleteAll) {
        this.deleteAll = deleteAll;
    }
    
    public boolean isDeleteAll() {
        return deleteAll;
    }
    
    public List get<VOClassName>List(){
        return <voInstanceName>List;
    }
    
    public void set<VOClassName>List(List <voInstanceName>List){
        this.<voInstanceName>List = <voInstanceName>List;
    }
    
public String createNewRecord(){
	
			
        <VOClassName>BusinessDelegate delegate = new <VOClassName>BusinessDelegate();
		
        try{
			
			delegate.insert(<voInstanceName>);
        }
        /*Bug# 11 dated :25 Mar Updated by bhushan*/
        catch(HexApplicationException ex){
		System.out.println("inside *************  catch(HexApplicationException ex)");
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"primary key violation Duplicate entry","Duplicate entry"));  
		//ex.printStackTrace();
            /*String msg=null;
            String msg1=null;
            String msg2="GenericJDBCException"; 
            String msg3="ConstraintViolationException";
            String msg4="SQLGrammarException";
            String getmsg=ex.toString();
            if(getmsg.indexOf(msg3)>=0){
                System.out.println("Duplicate Value");
                msg = ex.getStackTraceString().substring(ex.getStackTraceString().indexOf("Duplicate"));
               // msg1 = msg.substring(0,msg.indexOf("at"));
			msg1="Duplicate Value Entered";
            }
             if(getmsg.indexOf(msg2)>=0){
                System.out.println("Data too long");
                ex.printStackTrace();
                msg =  ex.getStackTraceString().substring(ex.getStackTraceString().indexOf("Data"));
                String str1 = msg.substring(0,msg.indexOf("at com"));
                int indx=str1.indexOf("at row");
                //msg1=str1.substring(0, indx);
			msg1="Data is Too Long";
             }
             if(getmsg.indexOf(msg4)>=0){
                msg1="Database/Table Not Found!!!";
             }
		//msg1="exception in createNewRecord !!!! ";
             FacesContext.getCurrentInstance ().addMessage ("Error", new FacesMessage ( FacesMessage.SEVERITY_INFO, msg1,msg1));    */    
             return "<voInstanceName>Add";
        }
        catch(NumberFormatException exp3){
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"primary key violation Duplicate entry","Duplicate entry"));        
            return "<voInstanceName>Add";
        }
	catch(Exception e){
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"primary key violation Duplicate entry","Duplicate entry"));        
            return "<voInstanceName>Add";
        }
        catch(Error e){
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"primary key violation Duplicate entry","Duplicate entry"));       
            return "<voInstanceName>Add";
        }
        /*End: Bug# 11 dated :25 Mar Updated by bhushan*/
        initialiseList();
        return "<voInstanceName>List";
    }

    public void clear(){
		fieldValue = "";
		setColumnValue("");
		initialiseList();
	}
    
    public String getList(){
  
    try{
        int iCurrentPage = Integer.parseInt(currentPage);
        int endRecord = (iCurrentPage*pageSize);
        int startRecord = endRecord - pageSize;
        List resultList =  getContents(startRecord,pageSize);
        this.set<VOClassName>List(resultList);
         <voInstanceName>DataModel.setWrappedData(resultList);
         }catch(Exception ex){
	             ex.printStackTrace();
	             FacesContext.getCurrentInstance ().addMessage ( "Error", new FacesMessage ( FacesMessage.SEVERITY_INFO, ex.getMessage(), ex.getMessage()));        
        }
		get<VOClassName>Panel() .setRendered(true);
        return "<voInstanceName>List";
    }
    private List getContents(int startRecord, int pageSize){
        <VOClassName>BusinessDelegate delegate = new <VOClassName>BusinessDelegate();
        try{
            return (List)delegate.getAll<VOClassName>(startRecord,pageSize);
        }catch(Exception ex){
            ex.printStackTrace();
             FacesContext.getCurrentInstance ().addMessage ( "Error", new FacesMessage ( FacesMessage.SEVERITY_INFO, ex.getMessage(), ex.getMessage()));        
            return null;
        }
        
    }
    
    
    private List getAllContents(){
	
	populateColumnNameFields(); // Calling local method to populate fields in the drop-down. 

        <VOClassName>BusinessDelegate delegate = new <VOClassName>BusinessDelegate();
        try{
            return (List)delegate.getAll<VOClassName>();
        }catch(Exception ex){
            ex.printStackTrace();
             FacesContext.getCurrentInstance ().addMessage ( "Error", new FacesMessage ( FacesMessage.SEVERITY_INFO, ex.getMessage(), ex.getMessage()));        
            return null;
        }
        
    }
    
    
    public String select(){
        this.set<VOClassName>((<VOClassName>)<voInstanceName>DataModel.getRowData());
		
		FacesContext.getCurrentInstance().renderResponse();
        return "<voInstanceName>Edit";
    }
   

   public String updateRecord(){
       
		try{
			
            <VOClassName>BusinessDelegate delegate = new <VOClassName>BusinessDelegate();
				
            delegate.update(<voInstanceName>);
        }catch(Exception ex){
            ex.printStackTrace();
             FacesContext.getCurrentInstance ().addMessage ( "Error", new FacesMessage ( FacesMessage.SEVERITY_INFO, ex.getMessage(), ex.getMessage()));
             return "<voInstanceName>Edit";
        }
           initialiseList();
        return "<voInstanceName>List";
    }
    
    public String delete(){
    
        List deleteList = new ArrayList();
		System.out.println("getting into delete method");
        for(int index=0;index<<voInstanceName>List.size();index++){
            <VOClassName> <voInstanceName> = (<VOClassName>)<voInstanceName>List.get(index);
            if(<voInstanceName>.isToBeDeleted()== true){
                deleteList.add(<voInstanceName>);
            }
        }
        
        
        <VOClassName>BusinessDelegate delegate = new <VOClassName>BusinessDelegate();
        try{
            if(deleteList.size()>0)
                delegate.deleteAll(deleteList);
        }catch(Exception ex){
            ex.printStackTrace();
             FacesContext.getCurrentInstance ().addMessage ( "Error", new FacesMessage ( FacesMessage.SEVERITY_INFO, ex.getMessage(), ex.getMessage()));        
        }
         initialiseList();
        return "<voInstanceName>List";

    }
    
   

 public String add(){

System.out.println("getting into add method");
     <voInstanceName> = new <VOClassName>();
	 return "<voInstanceName>Add";
	}


	public SelectItem[] getColumnNameList() {
		return columnNameList;
	}

	public void setColumnNameList(SelectItem[] columnNameList) {
		this.columnNameList = columnNameList;
	}

	public String getFieldValue() {
		return fieldValue;
	}

	public void setFieldValue(String fieldValue) {
		this.fieldValue = fieldValue;
	}

	public String getColumnName() {
		return columnName;
	}

	public void setColumnName(String columnName) {
		this.columnName = columnName;
	}

	public String getColumnValue() {
		return columnValue;
	}

	public void setColumnValue(String columnValue) {
		this.columnValue = columnValue;
	}

	private Field[] getFields(Object source) {
		return source.getClass().getDeclaredFields();
	}

	private void populateColumnNameFields() {
		
		if (columnNameList == null || columnNameList.length == 0) {
			Field fields[] = getFields(<voInstanceName>);			
			columnNameList = new SelectItem[fields.length-1];
			int i=0;
	

			for (int index = 0; index < fields.length-2; index++) {
				Field field = fields[index];
				if (field.getName() != null && field.getName().length() != 0
						&& field.getName()!= "hashCode" && field.getName()!= "toBeDeleted") {
					String tempColumnValue = field.getName();
					tempColumnValue = tempColumnValue.substring(0, 1)
							.toUpperCase()
							+ tempColumnValue.substring(1,
									tempColumnValue.length()).toLowerCase();
									
						columnValue=field.getName();
					columnNameList[i] = new SelectItem(field.getName(),
							tempColumnValue);
				  i++;
				}
			}

			columnValue="--Select the field--";
            columnNameList[i] = new SelectItem(columnValue,"--Select the field--");

		}
	}


	public String search() {	

	System.out.println("Entering into Search of BEAN********");

		<VOClassName>BusinessDelegate delegate = new <VOClassName>BusinessDelegate();
		try {
			<voInstanceName>List = (List) delegate.search(getFieldValue(),
					getColumnValue());
			if (<voInstanceName>List.size() > 0) {
	  			 doPagination(<voInstanceName>List);
			}
			else{
				
				<voInstanceName>DataModel.setWrappedData(null);
				get<VOClassName>Panel() .setRendered(false);
	            FacesContext.getCurrentInstance().addMessage("<formid>", new FacesMessage(FacesMessage.SEVERITY_ERROR," ","The value you have entered is not available in the Database..."));//added by  kumar roushan
				return null;
			}
		} catch (Exception ex) {

			ex.printStackTrace();

		}
		return "<voInstanceName>List";
	}

	public void doPagination(List <voInstanceName>List){
		
		int recordCount = <voInstanceName>List.size();
		int totalPages = (recordCount / pageSize)+(recordCount % pageSize >0?1:0);
		if(recordCount>pageSize){
		<voInstanceName>List = <voInstanceName>List.subList(0,pageSize);
		}
		currentPage = "1";
		<voInstanceName>DataModel = new ListDataModel();
		pageList = new SelectItem[totalPages];
		for(int index=0;index<totalPages;index++){
		    String pagenum = String.valueOf(index+1);
		    pageList[index] = new SelectItem(pagenum,pagenum);
		}
		<voInstanceName>DataModel.setWrappedData(<voInstanceName>List);
		get<VOClassName>Panel().setRendered(true);
	}


	public HtmlPanelGroup get<VOClassName>Panel() {
		return <voInstanceName>Panel;
	}
	public void set<VOClassName>Panel(HtmlPanelGroup <voInstanceName>Panel) {
		this.<voInstanceName>Panel = <voInstanceName>Panel;
	}
    
}

